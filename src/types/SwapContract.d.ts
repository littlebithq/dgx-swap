/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SwapContractInterface extends ethers.utils.Interface {
  functions: {
    "CGT_ADDRESS()": FunctionFragment;
    "DGX_ADDRESS()": FunctionFragment;
    "collect()": FunctionFragment;
    "swap(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CGT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DGX_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "swap", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "CGT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DGX_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "collectedCGT(uint256,address)": EventFragment;
    "swappedTokens(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "collectedCGT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "swappedTokens"): EventFragment;
}

export type collectedCGTEvent = TypedEvent<
  [BigNumber, string] & { cgtAmount: BigNumber; account: string }
>;

export type swappedTokensEvent = TypedEvent<
  [BigNumber, string] & { dgxAmount: BigNumber; account: string }
>;

export class SwapContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SwapContractInterface;

  functions: {
    CGT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DGX_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CGT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DGX_ADDRESS(overrides?: CallOverrides): Promise<string>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CGT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DGX_ADDRESS(overrides?: CallOverrides): Promise<string>;

    collect(overrides?: CallOverrides): Promise<void>;

    swap(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "collectedCGT(uint256,address)"(
      cgtAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { cgtAmount: BigNumber; account: string }
    >;

    collectedCGT(
      cgtAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { cgtAmount: BigNumber; account: string }
    >;

    "swappedTokens(uint256,address)"(
      dgxAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { dgxAmount: BigNumber; account: string }
    >;

    swappedTokens(
      dgxAmount?: null,
      account?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { dgxAmount: BigNumber; account: string }
    >;
  };

  estimateGas: {
    CGT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DGX_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CGT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DGX_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
