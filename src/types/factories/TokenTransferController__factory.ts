/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenTransferController,
  TokenTransferControllerInterface,
} from "../TokenTransferController";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "_sender",
        type: "address",
      },
      {
        name: "_recipient",
        type: "address",
      },
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_amount",
        type: "uint256",
      },
      {
        name: "_transfer_from",
        type: "bool",
      },
    ],
    name: "put_transfer",
    outputs: [
      {
        name: "_success",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6060604052341561000f57600080fd5b61011b8061001e6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806392846ab6146044575b600080fd5b3415604e57600080fd5b60ca600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035151590602001909190505060e4565b604051808215151515815260200191505060405180910390f35b6000959450505050505600a165627a7a7230582034a230b9540aa878ee426057dd0801667c6f054eae2e5870130796222cd55c970029";

export class TokenTransferController__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenTransferController> {
    return super.deploy(overrides || {}) as Promise<TokenTransferController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenTransferController {
    return super.attach(address) as TokenTransferController;
  }
  connect(signer: Signer): TokenTransferController__factory {
    return super.connect(signer) as TokenTransferController__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferControllerInterface {
    return new utils.Interface(_abi) as TokenTransferControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransferController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TokenTransferController;
  }
}
