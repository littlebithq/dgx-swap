/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapContract, SwapContractInterface } from "../SwapContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "DGX_Amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "swappedTokens",
    type: "event",
  },
  {
    inputs: [],
    name: "CGT_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_AmountBurnt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a64806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304f6e3341461005157806331d207901461006f57806394b918de1461008d578063dd85c493146100a9575b600080fd5b6100596100c7565b60405161006691906106ce565b60405180910390f35b6100776100df565b60405161008491906106ce565b60405180910390f35b6100a760048036038101906100a291906105f5565b6100f7565b005b6100b161055e565b6040516100be91906107d2565b60405180910390f35b731bde87e1f83a20a39fcfded73363debe3a88f60281565b73b5bdc848ed5662dc0c52b306eedf8c33584a324381565b8073b5bdc848ed5662dc0c52b306eedf8c33584a324373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161014591906106ce565b60206040518083038186803b15801561015d57600080fd5b505afa158015610171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610195919061061e565b10156101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610772565b60405180910390fd5b600a816101e3919061087d565b731bde87e1f83a20a39fcfded73363debe3a88f60273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161023091906106ce565b60206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610280919061061e565b10156102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610792565b60405180910390fd5b8073b5bdc848ed5662dc0c52b306eedf8c33584a324373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016103119291906106e9565b60206040518083038186803b15801561032957600080fd5b505afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610361919061061e565b10156103a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610399906107b2565b60405180910390fd5b806000808282546103b39190610827565b9250508190555073b5bdc848ed5662dc0c52b306eedf8c33584a324373ffffffffffffffffffffffffffffffffffffffff166323b872dd336000846040518463ffffffff1660e01b815260040161040c93929190610712565b602060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e91906105cc565b50731bde87e1f83a20a39fcfded73363debe3a88f60273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361049b84600a610564565b600a856104a8919061087d565b6104b29190610827565b6040518363ffffffff1660e01b81526004016104cf929190610749565b602060405180830381600087803b1580156104e957600080fd5b505af11580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052191906105cc565b507f3bb3729ca9fe8a332761e09006f9bfc3d8d361ddcbd3fa81ca531613f906efff81336040516105539291906107ed565b60405180910390a150565b60005481565b60006005828461057491906108f6565b106105825760019050610587565b600090505b92915050565b60008151905061059c81610a00565b92915050565b6000813590506105b181610a17565b92915050565b6000815190506105c681610a17565b92915050565b6000602082840312156105de57600080fd5b60006105ec8482850161058d565b91505092915050565b60006020828403121561060757600080fd5b6000610615848285016105a2565b91505092915050565b60006020828403121561063057600080fd5b600061063e848285016105b7565b91505092915050565b610650816108ae565b82525050565b6000610663601883610816565b915061066e82610985565b602082019050919050565b6000610686601c83610816565b9150610691826109ae565b602082019050919050565b60006106a9601c83610816565b91506106b4826109d7565b602082019050919050565b6106c8816108ec565b82525050565b60006020820190506106e36000830184610647565b92915050565b60006040820190506106fe6000830185610647565b61070b6020830184610647565b9392505050565b60006060820190506107276000830186610647565b6107346020830185610647565b61074160408301846106bf565b949350505050565b600060408201905061075e6000830185610647565b61076b60208301846106bf565b9392505050565b6000602082019050818103600083015261078b81610656565b9050919050565b600060208201905081810360008301526107ab81610679565b9050919050565b600060208201905081810360008301526107cb8161069c565b9050919050565b60006020820190506107e760008301846106bf565b92915050565b600060408201905061080260008301856106bf565b61080f6020830184610647565b9392505050565b600082825260208201905092915050565b6000610832826108ec565b915061083d836108ec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561087257610871610927565b5b828201905092915050565b6000610888826108ec565b9150610893836108ec565b9250826108a3576108a2610956565b5b828204905092915050565b60006108b9826108cc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610901826108ec565b915061090c836108ec565b92508261091c5761091b610956565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f496e73756666696369656e74204447582062616c616e63650000000000000000600082015250565b7f496e73756666696369656e742043475420696e20636f6e747261637400000000600082015250565b7f416d6f756e7420657863656564732044475820616c6c6f77616e636500000000600082015250565b610a09816108c0565b8114610a1457600080fd5b50565b610a20816108ec565b8114610a2b57600080fd5b5056fea2646970667358221220b36d1e95edc80b6e957539fb156b99ed9327e48bbf3869e19d69a5188635242a64736f6c63430008040033";

export class SwapContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapContract> {
    return super.deploy(overrides || {}) as Promise<SwapContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapContract {
    return super.attach(address) as SwapContract;
  }
  connect(signer: Signer): SwapContract__factory {
    return super.connect(signer) as SwapContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapContractInterface {
    return new utils.Interface(_abi) as SwapContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapContract {
    return new Contract(address, _abi, signerOrProvider) as SwapContract;
  }
}
