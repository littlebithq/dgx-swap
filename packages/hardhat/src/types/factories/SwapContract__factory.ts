/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapContract, SwapContractInterface } from "../SwapContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "DGX_Amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "swappedTokens",
    type: "event",
  },
  {
    inputs: [],
    name: "CGT_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_AmountBurnt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109f5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304f6e3341461005157806331d207901461006f57806394b918de1461008d578063dd85c493146100a9575b600080fd5b6100596100c7565b6040516100669190610690565b60405180910390f35b6100776100df565b6040516100849190610690565b60405180910390f35b6100a760048036038101906100a291906105b7565b6100f7565b005b6100b1610549565b6040516100be9190610794565b60405180910390f35b73f5238462e7235c7b62811567e63dd17d12c2eaa081565b734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf81565b80734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101459190610690565b60206040518083038186803b15801561015d57600080fd5b505afa158015610171573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019591906105e0565b10156101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610734565b60405180910390fd5b600a816101e3919061083f565b73f5238462e7235c7b62811567e63dd17d12c2eaa073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102309190610690565b60206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028091906105e0565b10156102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610754565b60405180910390fd5b80734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016103119291906106ab565b60206040518083038186803b15801561032957600080fd5b505afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036191906105e0565b10156103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990610774565b60405180910390fd5b806000808282546103b391906107e9565b92505081905550734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff166323b872dd336000846040518463ffffffff1660e01b815260040161040c939291906106d4565b602060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e919061058e565b5073f5238462e7235c7b62811567e63dd17d12c2eaa073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600a8461049d919061083f565b6040518363ffffffff1660e01b81526004016104ba92919061070b565b602060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c919061058e565b507f3bb3729ca9fe8a332761e09006f9bfc3d8d361ddcbd3fa81ca531613f906efff813360405161053e9291906107af565b60405180910390a150565b60005481565b60008151905061055e81610991565b92915050565b600081359050610573816109a8565b92915050565b600081519050610588816109a8565b92915050565b6000602082840312156105a057600080fd5b60006105ae8482850161054f565b91505092915050565b6000602082840312156105c957600080fd5b60006105d784828501610564565b91505092915050565b6000602082840312156105f257600080fd5b600061060084828501610579565b91505092915050565b61061281610870565b82525050565b60006106256018836107d8565b915061063082610916565b602082019050919050565b6000610648601c836107d8565b91506106538261093f565b602082019050919050565b600061066b601c836107d8565b915061067682610968565b602082019050919050565b61068a816108ae565b82525050565b60006020820190506106a56000830184610609565b92915050565b60006040820190506106c06000830185610609565b6106cd6020830184610609565b9392505050565b60006060820190506106e96000830186610609565b6106f66020830185610609565b6107036040830184610681565b949350505050565b60006040820190506107206000830185610609565b61072d6020830184610681565b9392505050565b6000602082019050818103600083015261074d81610618565b9050919050565b6000602082019050818103600083015261076d8161063b565b9050919050565b6000602082019050818103600083015261078d8161065e565b9050919050565b60006020820190506107a96000830184610681565b92915050565b60006040820190506107c46000830185610681565b6107d16020830184610609565b9392505050565b600082825260208201905092915050565b60006107f4826108ae565b91506107ff836108ae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610834576108336108b8565b5b828201905092915050565b600061084a826108ae565b9150610855836108ae565b925082610865576108646108e7565b5b828204905092915050565b600061087b8261088e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f496e73756666696369656e74204447582062616c616e63650000000000000000600082015250565b7f496e73756666696369656e742043475420696e20636f6e747261637400000000600082015250565b7f416d6f756e7420657863656564732044475820616c6c6f77616e636500000000600082015250565b61099a81610882565b81146109a557600080fd5b50565b6109b1816108ae565b81146109bc57600080fd5b5056fea2646970667358221220274596bb6e52cf43364347818ac46e34ab6df4c428df1dde30149666b083bf0764736f6c63430008040033";

export class SwapContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapContract> {
    return super.deploy(overrides || {}) as Promise<SwapContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapContract {
    return super.attach(address) as SwapContract;
  }
  connect(signer: Signer): SwapContract__factory {
    return super.connect(signer) as SwapContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapContractInterface {
    return new utils.Interface(_abi) as SwapContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapContract {
    return new Contract(address, _abi, signerOrProvider) as SwapContract;
  }
}
