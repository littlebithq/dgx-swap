/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapContract, SwapContractInterface } from "../SwapContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "DGX_Amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "swappedTokens",
    type: "event",
  },
  {
    inputs: [],
    name: "CGT_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DGX_AmountBurnt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a67806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304f6e3341461005157806331d207901461006f57806394b918de1461008d578063dd85c493146100a9575b600080fd5b6100596100c7565b60405161006691906106d1565b60405180910390f35b6100776100df565b60405161008491906106d1565b60405180910390f35b6100a760048036038101906100a291906105f8565b6100f7565b005b6100b1610561565b6040516100be91906107d5565b60405180910390f35b73f5238462e7235c7b62811567e63dd17d12c2eaa081565b734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf81565b80734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161014591906106d1565b60206040518083038186803b15801561015d57600080fd5b505afa158015610171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101959190610621565b10156101d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cd90610775565b60405180910390fd5b600a816101e39190610880565b73f5238462e7235c7b62811567e63dd17d12c2eaa073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161023091906106d1565b60206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102809190610621565b10156102c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b890610795565b60405180910390fd5b80734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016103119291906106ec565b60206040518083038186803b15801561032957600080fd5b505afa15801561033d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103619190610621565b10156103a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610399906107b5565b60405180910390fd5b806000808282546103b3919061082a565b92505081905550734f3afec4e5a3f2a6a1a411def7d7dfe50ee057bf73ffffffffffffffffffffffffffffffffffffffff166323b872dd336000846040518463ffffffff1660e01b815260040161040c93929190610715565b602060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e91906105cf565b5073f5238462e7235c7b62811567e63dd17d12c2eaa073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361049e84633b9aca00610567565b600a856104ab9190610880565b6104b5919061082a565b6040518363ffffffff1660e01b81526004016104d292919061074c565b602060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052491906105cf565b507f3bb3729ca9fe8a332761e09006f9bfc3d8d361ddcbd3fa81ca531613f906efff81336040516105569291906107f0565b60405180910390a150565b60005481565b60006005828461057791906108f9565b10610585576001905061058a565b600090505b92915050565b60008151905061059f81610a03565b92915050565b6000813590506105b481610a1a565b92915050565b6000815190506105c981610a1a565b92915050565b6000602082840312156105e157600080fd5b60006105ef84828501610590565b91505092915050565b60006020828403121561060a57600080fd5b6000610618848285016105a5565b91505092915050565b60006020828403121561063357600080fd5b6000610641848285016105ba565b91505092915050565b610653816108b1565b82525050565b6000610666601883610819565b915061067182610988565b602082019050919050565b6000610689601c83610819565b9150610694826109b1565b602082019050919050565b60006106ac601c83610819565b91506106b7826109da565b602082019050919050565b6106cb816108ef565b82525050565b60006020820190506106e6600083018461064a565b92915050565b6000604082019050610701600083018561064a565b61070e602083018461064a565b9392505050565b600060608201905061072a600083018661064a565b610737602083018561064a565b61074460408301846106c2565b949350505050565b6000604082019050610761600083018561064a565b61076e60208301846106c2565b9392505050565b6000602082019050818103600083015261078e81610659565b9050919050565b600060208201905081810360008301526107ae8161067c565b9050919050565b600060208201905081810360008301526107ce8161069f565b9050919050565b60006020820190506107ea60008301846106c2565b92915050565b600060408201905061080560008301856106c2565b610812602083018461064a565b9392505050565b600082825260208201905092915050565b6000610835826108ef565b9150610840836108ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108755761087461092a565b5b828201905092915050565b600061088b826108ef565b9150610896836108ef565b9250826108a6576108a5610959565b5b828204905092915050565b60006108bc826108cf565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610904826108ef565b915061090f836108ef565b92508261091f5761091e610959565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f496e73756666696369656e74204447582062616c616e63650000000000000000600082015250565b7f496e73756666696369656e742043475420696e20636f6e747261637400000000600082015250565b7f416d6f756e7420657863656564732044475820616c6c6f77616e636500000000600082015250565b610a0c816108c3565b8114610a1757600080fd5b50565b610a23816108ef565b8114610a2e57600080fd5b5056fea26469706673582212204bf5f2d6eed35702a9e04f5d3374052683fb6d40fbd48f21621eaabd2e5c828464736f6c63430008040033";

export class SwapContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapContract> {
    return super.deploy(overrides || {}) as Promise<SwapContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapContract {
    return super.attach(address) as SwapContract;
  }
  connect(signer: Signer): SwapContract__factory {
    return super.connect(signer) as SwapContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapContractInterface {
    return new utils.Interface(_abi) as SwapContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapContract {
    return new Contract(address, _abi, signerOrProvider) as SwapContract;
  }
}
