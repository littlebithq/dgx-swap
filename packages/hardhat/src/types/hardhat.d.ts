/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SwapContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapContract__factory>;
    getContractFactory(
      name: "CacheGold",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CacheGold__factory>;
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "LockedGoldOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockedGoldOracle__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ContractResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractResolver__factory>;
    getContractFactory(
      name: "ResolverClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverClient__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "TokenApprovalController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenApprovalController__factory>;
    getContractFactory(
      name: "TokenInfoController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenInfoController__factory>;
    getContractFactory(
      name: "TokenLoggerCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLoggerCallback__factory>;
    getContractFactory(
      name: "TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceiver__factory>;
    getContractFactory(
      name: "TokenTransferController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenTransferController__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SwapContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapContract>;
    getContractAt(
      name: "CacheGold",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CacheGold>;
    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "LockedGoldOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockedGoldOracle>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ContractResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractResolver>;
    getContractAt(
      name: "ResolverClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverClient>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "TokenApprovalController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenApprovalController>;
    getContractAt(
      name: "TokenInfoController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenInfoController>;
    getContractAt(
      name: "TokenLoggerCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLoggerCallback>;
    getContractAt(
      name: "TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceiver>;
    getContractAt(
      name: "TokenTransferController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenTransferController>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
